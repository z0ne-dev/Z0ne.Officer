// <auto-generated />

namespace Z0ne.Officer;

public static class NumericGuard
{
    public static ArgumentGuard<decimal> Negative(this ArgumentGuard<decimal> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<decimal> Positive(this ArgumentGuard<decimal> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<sbyte> Negative(this ArgumentGuard<sbyte> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<sbyte> Positive(this ArgumentGuard<sbyte> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<short> Negative(this ArgumentGuard<short> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<short> Positive(this ArgumentGuard<short> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<int> Negative(this ArgumentGuard<int> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<int> Positive(this ArgumentGuard<int> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<long> Negative(this ArgumentGuard<long> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<long> Positive(this ArgumentGuard<long> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<float> Negative(this ArgumentGuard<float> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<float> Positive(this ArgumentGuard<float> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<double> Negative(this ArgumentGuard<double> guard)
    {
        if (guard.Value < 0)
        {
            throw new ArgumentException("Negative Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<double> Positive(this ArgumentGuard<double> guard)
    {
        if (guard.Value > 0)
        {
            throw new ArgumentException("Positive Number", guard.ParameterName);
        }

        return guard;
    }

    public static ArgumentGuard<decimal> Null(this ArgumentGuard<decimal> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<sbyte> Null(this ArgumentGuard<sbyte> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<short> Null(this ArgumentGuard<short> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<int> Null(this ArgumentGuard<int> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<long> Null(this ArgumentGuard<long> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<float> Null(this ArgumentGuard<float> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<double> Null(this ArgumentGuard<double> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<byte> Null(this ArgumentGuard<byte> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<ushort> Null(this ArgumentGuard<ushort> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<uint> Null(this ArgumentGuard<uint> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
    public static ArgumentGuard<ulong> Null(this ArgumentGuard<ulong> guard)
    {
        if (guard.Value == 0)
        {
            throw new ArgumentException("Number is 0", guard.ParameterName);
        }

        return guard;
    }
}
